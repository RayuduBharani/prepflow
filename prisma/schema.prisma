datasource db {
  provider = "postgresql"
  // url       = env("DATABASE_URL")
  url      = env("LOCAL_URI")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserProgress UserProgress[]
}

model SimilarProblem {
  id        Int     @id @default(autoincrement())
  problemId Int
  similarId Int
  problem   Problem @relation("ProblemToSimilar", fields: [problemId], references: [id], onDelete: Cascade)
  similar   Problem @relation("SimilarToProblem", fields: [similarId], references: [id], onDelete: Cascade)

  @@unique([problemId, similarId])
  @@index([problemId])
  @@index([similarId])
}

model ProblemTopic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[] @relation("ProblemTopicProblems")
}

model ProblemCompany {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  image    String?
  problems Problem[] @relation("ProblemCompanyProblems")
}

model ProblemMainTopic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[] @relation("ProblemMainTopicProblems")
}

model ProblemTopicSlug {
  id       Int       @id @default(autoincrement())
  slug     String    @unique
  problems Problem[] @relation("ProblemTopicSlugProblems")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  BASIC
  SCHOOL
}

enum Platform {
  LEETCODE
  GFG
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  userId      String
  problemId   Int
  isCompleted Boolean   @default(false) // Tracks if the problem is completed
  completedAt DateTime? @default(now()) // Timestamp for when the problem was marked as completed
  updatedAt   DateTime  @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId]) // Ensures a user can only have one progress record per problem
  @@index([userId])
  @@index([problemId])
}

model Sheets {
  id         Int             @id @default(autoincrement())
  name       String
  slug       String?         @unique
  categories SheetCategory[] @relation("SheetCategories")
}

model SheetCategory {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String
  sheetId  Int
  sheet    Sheets    @relation("SheetCategories", fields: [sheetId], references: [id], onDelete: Cascade)
  problems Problem[] @relation("SheetCategoryProblems")
}

model ProblemCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  problems  Problem[] @relation("ProblemCategoryProblems")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Problem {
  id             Int                @id @default(autoincrement())
  title          String
  slug           String             @unique
  isPremium      Boolean?
  dislikes       Int?
  likes          Int?
  difficulty     Difficulty
  url            String
  accepted       Int?
  submissions    Int                @default(0)
  acceptanceRate Float              @default(0)
  platform       Platform
  sheetCategory  SheetCategory[]    @relation("SheetCategoryProblems")
  category       ProblemCategory[]  @relation("ProblemCategoryProblems")
  topicTags      ProblemTopic[]     @relation("ProblemTopicProblems")
  companyTags    ProblemCompany[]   @relation("ProblemCompanyProblems")
  mainTopics     ProblemMainTopic[] @relation("ProblemMainTopicProblems")
  topicSlugs     ProblemTopicSlug[] @relation("ProblemTopicSlugProblems")
  similarTo      SimilarProblem[]   @relation("ProblemToSimilar")
  similarFrom    SimilarProblem[]   @relation("SimilarToProblem")
  UserProgress   UserProgress[]

  @@index([difficulty])
  @@index([difficulty, platform])
}



model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


enum JobType {
  Full_time
  Remote
  Part_time
  Contract
}

model Jobs {
  id               String   @id @default(uuid())
  company          String
  title            String
  jobtype          JobType
  location         String
  salary           String
  logo             String
  about            String
  responsibilities String[]
  requirements     String[]
  skills           String[]
  benefits         String[]
  url              String
  createdAt        DateTime @default(now())
  experience       String
}

enum InternType {
  Full_time
  remote
  Part_time
  on_site
}

model internships {
  id           String     @id @default(uuid())
  company      String
  logo         String
  title        String
  location     String
  stipend      String
  duration     String
  about        String
  requirements String[]
  skills       String[]
  benefits     String[]
  url          String
  internType   InternType
  createdAt    DateTime   @default(now())
}


enum NodeType {
  MAIN
  SUB
  END
  OPTIONAL
}

model Roadmap {
  id          String     @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nodes       Node[]
  edges       Edge[]
}

model Node {
  id          String   @id @default(uuid())
  type        NodeType
  label       String
  positionX   Float
  positionY   Float
  data        Json? // Store additional data like color, custom properties
  roadmap     Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // For edge connections
  sourceEdges Edge[] @relation("SourceEdges")
  targetEdges Edge[] @relation("TargetEdges")

  @@index([roadmapId])
}

model Edge {
  id          String   @id @default(uuid())
  source      Node     @relation("SourceEdges", fields: [sourceNodeId], references: [id])
  sourceNodeId String
  target      Node     @relation("TargetEdges", fields: [targetNodeId], references: [id])
  targetNodeId String
  label       String?
  roadmap     Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roadmapId])
}